setores_reduzidos$selected <- ifelse(1:nrow(setores_reduzidos) %in% postos_selecionados, "Selected", "Not Selected")
# Imprimir matriz de cobertura
cat("\nüìä Matriz de Cobertura:\n")
print(matrix_cobertura)
# Plotar o resultado
ggplot() +
geom_sf(data = setores_urbanos, fill = "lightgrey", color = "black") +
geom_sf(data = setores_reduzidos, aes(fill = selected), color = "black", size = 1.2) +
scale_fill_manual(values = c("Selected" = "yellow", "Not Selected" = "lightgrey")) +
labs(title = "üó∫Ô∏è Cobertura dos Postos de Sa√∫de",
fill = "Status") +
theme_minimal()
} else {
cat("‚ö†Ô∏è N√£o foi poss√≠vel encontrar uma solu√ß√£o.\n")
}
}
# Testar a fun√ß√£o
resolver_matrix_cobertura_conjuntos(R_max_km = 2, p = 3)
library(lpSolve)
library(geobr)
library(sf)
library(units)
library(ggplot2)
library(dplyr)
resolver_matrix_cobertura_conjuntos <- function(R_max_km, p) {
# Baixar setores censit√°rios de Itacoatiara-AM
setores <- read_census_tract(code_tract = 1301902, year = 2010)
# Filtrar apenas setores urbanos
setores_urbanos <- setores %>%
filter(zone == "URBANO", !is.na(name_neighborhood))
# Verificar se h√° setores suficientes
if (nrow(setores_urbanos) < p) {
stop("N√∫mero insuficiente de setores urbanos para selecionar postos.")
}
setores_urbanos$centroid <- st_centroid(setores_urbanos$geom)
coords_matrix <- st_coordinates(setores_urbanos$centroid)
# Definir clusters para escolher pontos estrat√©gicos
set.seed(42)
clusters <- kmeans(coords_matrix, centers = p, nstart = 100)
setores_urbanos$cluster <- as.factor(clusters$cluster)
# Selecionar um setor representativo de cada cluster
setores_reduzidos <- setores_urbanos %>%
group_by(cluster) %>%
slice_min(order_by = st_distance(centroid, st_centroid(st_union(geom)))) %>%
ungroup()
# Calcular matriz de dist√¢ncias geod√©sicas (em km)
centroids_reduzidos <- setores_reduzidos$centroid
dist_matrix <- st_distance(centroids_reduzidos, centroids_reduzidos) / 1000
dist_matrix <- drop_units(dist_matrix)
# Criar matriz de cobertura (1 se dentro do raio, 0 caso contr√°rio)
matrix_cobertura <- ifelse(dist_matrix <= R_max_km, 1, 0)
n <- nrow(setores_reduzidos)
# Fun√ß√£o objetivo: minimizar o n√∫mero de postos
obj <- rep(1, n)
# Restri√ß√£o: cada setor deve ser coberto por pelo menos um posto
A <- matrix_cobertura
b <- rep(1, n)
dir <- rep(">=", n)
# Resolver o problema
resultado <- lp("min", obj, A, dir, b, all.bin = TRUE)
if (resultado$status == 0) {
cat("‚úÖ Solu√ß√£o encontrada com sucesso!\n")
# Armazenar os setores selecionados
solucao <- resultado$solution
postos_selecionados <- which(solucao == 1)
setores_selecionados <- setores_reduzidos$name_neighborhood[postos_selecionados]
cat("üè• Os postos devem ser instalados nos setores:\n")
print(setores_selecionados)
# Marcar setores selecionados
setores_reduzidos$selected <- ifelse(1:nrow(setores_reduzidos) %in% postos_selecionados, "Selected", "Not Selected")
# Imprimir matriz de cobertura
cat("\nüìä Matriz de Cobertura:\n")
print(matrix_cobertura)
# Plotar o resultado
ggplot() +
geom_sf(data = setores_urbanos, fill = "lightgrey", color = "black") +
geom_sf(data = setores_reduzidos, aes(fill = selected), color = "black", size = 1.2) +
scale_fill_manual(values = c("Selected" = "yellow", "Not Selected" = "lightgrey")) +
labs(title = "üó∫Ô∏è Cobertura dos Postos de Sa√∫de",
fill = "Status") +
theme_minimal()
} else {
cat("‚ö†Ô∏è N√£o foi poss√≠vel encontrar uma solu√ß√£o.\n")
}
}
# Testar a fun√ß√£o
resolver_matrix_cobertura_conjuntos(R_max_km = 2, p = 2)
library(lpSolve)
library(geobr)
library(sf)
library(ggplot2)
library(dplyr)
# Carregar bairros de Itacoatiara
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM")
}
coords <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords) # Converter para matriz num√©rica
# Criar matriz de dist√¢ncias entre bairros
dist_matrix <- as.matrix(dist(coords_matrix))
# Par√¢metros do problema
p <- 5  # N√∫mero de postos
n <- nrow(bairros_itacoatiara)  # N√∫mero de bairros
# Defini√ß√£o do problema de p-Centro
obj <- c(rep(0, n * n), rep(1, n))  # Objetivo: minimizar a dist√¢ncia m√°xima
# Restri√ß√µes de atendimento
A1 <- matrix(0, n, n * n + n)
for (i in 1:n) {
A1[i, ((i - 1) * n + 1):(i * n)] <- 1
}
b1 <- rep(1, n)
# Restri√ß√µes de cobertura
A2 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A2[idx, idx] <- 1
A2[idx, n * n + j] <- -1
}
}
b2 <- rep(0, n * n)
# Restri√ß√µes de dist√¢ncia m√°xima (C)
A3 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A3[idx, idx] <- 1
A3[idx, n * n + j] <- -1
}
}
b3 <- rep(0, n * n)
# Restri√ß√£o: exatamente p postos devem ser instalados
A4 <- matrix(0, 1, n * n + n)
A4[1, (n * n + 1):(n * n + n)] <- 1
b4 <- p
# Combina todas as restri√ß√µes
A <- rbind(A1, A2, A3, A4)
dir <- c(rep("=", n), rep("<=", n * n), rep("<=", n * n), "=")
b <- c(b1, b2, b3, b4)
# Resolver o problema
resultado <- lp("min", obj, A, dir, b, all.bin = TRUE)
# Verificar solu√ß√£o
if (resultado$status == 0) {
cat("Solu√ß√£o encontrada!\n")
# Extrair bairros selecionados
solucao <- resultado$solution
y <- solucao[(n * n + 1):(n * n + n)]
postos_selecionados <- which(y == 1)
bairros_selecionados <- bairros_itacoatiara$name_neighborhood[postos_selecionados]
cat(" Os postos devem ser instalados nos bairros:\n")
print(bairros_selecionados)
# Filtrar os bairros selecionados para o c√°lculo das dist√¢ncias
postos_novos <- bairros_itacoatiara[postos_selecionados, ]
# Baixar postos de sa√∫de existentes em Itacoatiara
postos_saude <- read_health_facilities(year = 2021)
postos_itacoatiara <- postos_saude[postos_saude$code_muni == 1301902, ]
# Verificar se h√° postos dispon√≠veis
if (nrow(postos_itacoatiara) == 0) {
stop("Nenhum posto de sa√∫de encontrado em Itacoatiara.")
}
# Obter coordenadas dos postos existentes e novos
postos_existentes_coords <- st_centroid(postos_itacoatiara$geom)
postos_novos_coords <- st_centroid(postos_novos$geom)
# Calcular matriz de dist√¢ncias
matriz_distancias <- st_distance(postos_existentes_coords, postos_novos_coords)
# Exibir matriz de dist√¢ncias
print("üìè Matriz de dist√¢ncias entre postos existentes e novos:")
print(matriz_distancias)
# Plotar o mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black", alpha = 0.3) +
geom_sf(data = postos_itacoatiara, color = "red", size = 3, shape = 17, alpha = 0.8) +
geom_sf(data = postos_novos, color = "blue", size = 3, shape = 16, alpha = 0.8) +
labs(title = "Postos de Sa√∫de Existentes vs. Novos Postos (p-Centro)",
subtitle = "üî¥ Existentes | üîµ Novos Selecionados",
caption = "Dist√¢ncias calculadas em metros") +
theme_minimal()
} else {
cat("N√£o foi poss√≠vel encontrar uma solu√ß√£o.\n")
}
library(lpSolve)
library(geobr)
library(sf)
library(ggplot2)
library(dplyr)
# Carregar bairros de Itacoatiara
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM")
}
coords <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords) # Converter para matriz num√©rica
# Criar matriz de dist√¢ncias entre bairros
dist_matrix <- as.matrix(dist(coords_matrix))
# Par√¢metros do problema
p <- 5  # N√∫mero de postos
n <- nrow(bairros_itacoatiara)  # N√∫mero de bairros
# Defini√ß√£o do problema de p-Centro
obj <- c(rep(0, n * n), rep(1, n))  # Objetivo: minimizar a dist√¢ncia m√°xima
# Restri√ß√µes de atendimento
A1 <- matrix(0, n, n * n + n)
for (i in 1:n) {
A1[i, ((i - 1) * n + 1):(i * n)] <- 1
}
b1 <- rep(1, n)
# Restri√ß√µes de cobertura
A2 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A2[idx, idx] <- 1
A2[idx, n * n + j] <- -1
}
}
b2 <- rep(0, n * n)
# Restri√ß√µes de dist√¢ncia m√°xima (C)
A3 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A3[idx, idx] <- 1
A3[idx, n * n + j] <- -1
}
}
b3 <- rep(0, n * n)
# Restri√ß√£o: exatamente p postos devem ser instalados
A4 <- matrix(0, 1, n * n + n)
A4[1, (n * n + 1):(n * n + n)] <- 1
b4 <- p
# Combina todas as restri√ß√µes
A <- rbind(A1, A2, A3, A4)
dir <- c(rep("=", n), rep("<=", n * n), rep("<=", n * n), "=")
b <- c(b1, b2, b3, b4)
# Resolver o problema
resultado <- lp("min", obj, A, dir, b, all.bin = TRUE)
# Verificar solu√ß√£o
if (resultado$status == 0) {
cat("Solu√ß√£o encontrada!\n")
# Extrair bairros selecionados
solucao <- resultado$solution
y <- solucao[(n * n + 1):(n * n + n)]
postos_selecionados <- which(y == 1)
bairros_selecionados <- bairros_itacoatiara$name_neighborhood[postos_selecionados]
cat(" Os postos devem ser instalados nos bairros:\n")
print(bairros_selecionados)
# Filtrar os bairros selecionados para o c√°lculo das dist√¢ncias
postos_novos <- bairros_itacoatiara[postos_selecionados, ]
# Baixar postos de sa√∫de existentes em Itacoatiara
postos_saude <- read_health_facilities(year = 2022)
postos_itacoatiara <- postos_saude[postos_saude$code_muni == 1301902, ]
# Verificar se h√° postos dispon√≠veis
if (nrow(postos_itacoatiara) == 0) {
stop("Nenhum posto de sa√∫de encontrado em Itacoatiara.")
}
# Obter coordenadas dos postos existentes e novos
postos_existentes_coords <- st_centroid(postos_itacoatiara$geom)
postos_novos_coords <- st_centroid(postos_novos$geom)
# Calcular matriz de dist√¢ncias
matriz_distancias <- st_distance(postos_existentes_coords, postos_novos_coords)
# Exibir matriz de dist√¢ncias
print("üìè Matriz de dist√¢ncias entre postos existentes e novos:")
print(matriz_distancias)
# Plotar o mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black", alpha = 0.3) +
geom_sf(data = postos_itacoatiara, color = "red", size = 3, shape = 17, alpha = 0.8) +
geom_sf(data = postos_novos, color = "blue", size = 3, shape = 16, alpha = 0.8) +
labs(title = "Postos de Sa√∫de Existentes vs. Novos Postos (p-Centro)",
subtitle = "üî¥ Existentes | üîµ Novos Selecionados",
caption = "Dist√¢ncias calculadas em metros") +
theme_minimal()
} else {
cat("N√£o foi poss√≠vel encontrar uma solu√ß√£o.\n")
}
library(lpSolve)
library(geobr)
library(sf)
library(ggplot2)
library(dplyr)
# Carregar bairros de Itacoatiara
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM")
}
coords <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords) # Converter para matriz num√©rica
# Criar matriz de dist√¢ncias entre bairros
dist_matrix <- as.matrix(dist(coords_matrix))
# Par√¢metros do problema
p <- 5  # N√∫mero de postos
n <- nrow(bairros_itacoatiara)  # N√∫mero de bairros
# Defini√ß√£o do problema de p-Centro
obj <- c(rep(0, n * n), rep(1, n))  # Objetivo: minimizar a dist√¢ncia m√°xima
# Restri√ß√µes de atendimento
A1 <- matrix(0, n, n * n + n)
for (i in 1:n) {
A1[i, ((i - 1) * n + 1):(i * n)] <- 1
}
b1 <- rep(1, n)
# Restri√ß√µes de cobertura
A2 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A2[idx, idx] <- 1
A2[idx, n * n + j] <- -1
}
}
b2 <- rep(0, n * n)
# Restri√ß√µes de dist√¢ncia m√°xima (C)
A3 <- matrix(0, n * n, n * n + n)
for (i in 1:n) {
for (j in 1:n) {
idx <- (i - 1) * n + j
A3[idx, idx] <- 1
A3[idx, n * n + j] <- -1
}
}
b3 <- rep(0, n * n)
# Restri√ß√£o: exatamente p postos devem ser instalados
A4 <- matrix(0, 1, n * n + n)
A4[1, (n * n + 1):(n * n + n)] <- 1
b4 <- p
# Combina todas as restri√ß√µes
A <- rbind(A1, A2, A3, A4)
dir <- c(rep("=", n), rep("<=", n * n), rep("<=", n * n), "=")
b <- c(b1, b2, b3, b4)
# Resolver o problema
resultado <- lp("min", obj, A, dir, b, all.bin = TRUE)
# Verificar solu√ß√£o
if (resultado$status == 0) {
cat("Solu√ß√£o encontrada!\n")
# Extrair bairros selecionados
solucao <- resultado$solution
y <- solucao[(n * n + 1):(n * n + n)]
postos_selecionados <- which(y == 1)
bairros_selecionados <- bairros_itacoatiara$name_neighborhood[postos_selecionados]
cat(" Os postos devem ser instalados nos bairros:\n")
print(bairros_selecionados)
# Filtrar os bairros selecionados para o c√°lculo das dist√¢ncias
postos_novos <- bairros_itacoatiara[postos_selecionados, ]
# Baixar postos de sa√∫de existentes em Itacoatiara
postos_saude <- read_health_facilities()
postos_itacoatiara <- postos_saude[postos_saude$code_muni == 1301902, ]
# Verificar se h√° postos dispon√≠veis
if (nrow(postos_itacoatiara) == 0) {
stop("Nenhum posto de sa√∫de encontrado em Itacoatiara.")
}
# Obter coordenadas dos postos existentes e novos
postos_existentes_coords <- st_centroid(postos_itacoatiara$geom)
postos_novos_coords <- st_centroid(postos_novos$geom)
# Calcular matriz de dist√¢ncias
matriz_distancias <- st_distance(postos_existentes_coords, postos_novos_coords)
# Exibir matriz de dist√¢ncias
print("üìè Matriz de dist√¢ncias entre postos existentes e novos:")
print(matriz_distancias)
# Plotar o mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black", alpha = 0.3) +
geom_sf(data = postos_itacoatiara, color = "red", size = 3, shape = 17, alpha = 0.8) +
geom_sf(data = postos_novos, color = "blue", size = 3, shape = 16, alpha = 0.8) +
labs(title = "Postos de Sa√∫de Existentes vs. Novos Postos (p-Centro)",
subtitle = "üî¥ Existentes | üîµ Novos Selecionados",
caption = "Dist√¢ncias calculadas em metros") +
theme_minimal()
} else {
cat("N√£o foi poss√≠vel encontrar uma solu√ß√£o.\n")
}
library(geobr)
library(sf)
library(ggplot2)
library(ggrepel)
install.packages("ggrepel")
library(geobr)
library(sf)
library(ggplot2)
library(ggrepel)
library(units)
# 1Ô∏è‚É£ Carregar os postos de sa√∫de existentes em Itacoatiara
ubs <- read_health_facilities()  # Carrega todas as UBS do Brasil
ubs_itacoatiara <- ubs[ubs$code_muni == 1301902, ]  # Filtra para Itacoatiara
# Verificar se h√° UBS na cidade
if (nrow(ubs_itacoatiara) == 0) {
stop("N√£o foram encontrados postos de sa√∫de em Itacoatiara.")
}
# 2Ô∏è‚É£ Carregar os bairros e pontos selecionados pelo p-median
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
# Verificar se h√° bairros dispon√≠veis
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM.")
}
# Calcular centroides dos bairros
coords_bairros <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords_bairros)
# Supondo que os bairros selecionados sejam extra√≠dos do resultado do p-median:
pontos_selecionados <- bairros_itacoatiara$geom[bairros_itacoatiara$selected == "Selected"]
# 3Ô∏è‚É£ Calcular a dist√¢ncia entre postos existentes e pontos selecionados
distancias <- st_distance(ubs_itacoatiara$geom, pontos_selecionados)
# Converter dist√¢ncias para quil√¥metros
distancias_km <- set_units(distancias, "km")
# Exibir matriz de dist√¢ncias
print(distancias_km)
# 4Ô∏è‚É£ Plotar mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black") +
geom_sf(data = ubs_itacoatiara, color = "red", size = 3, aes(geometry = geom)) +
geom_sf(data = pontos_selecionados, color = "blue", size = 4, aes(geometry = geom)) +
geom_text_repel(data = ubs_itacoatiara, aes(label = name_health_facility, geometry = geom),
stat = "sf_coordinates", size = 3, color = "red") +
geom_text_repel(data = bairros_itacoatiara[bairros_itacoatiara$selected == "Selected", ],
aes(label = name_neighborhood, geometry = geom), stat = "sf_coordinates",
size = 3, color = "blue") +
labs(title = "Dist√¢ncia entre UBS existentes e postos sugeridos pelo p-median",
subtitle = "Postos existentes (üî¥) e pontos √≥timos selecionados (üîµ)") +
theme_minimal()
library(geobr)
library(sf)
library(ggplot2)
library(ggrepel)
library(units)
# 1Ô∏è‚É£ Carregar os postos de sa√∫de existentes em Itacoatiara
ubs <- read_health_facilities()  # Carrega todas as UBS do Brasil
ubs_itacoatiara <- ubs[ubs$code_muni == 1301902, ]  # Filtra para Itacoatiara
# Verificar se h√° UBS na cidade
if (nrow(ubs_itacoatiara) == 0) {
stop("N√£o foram encontrados postos de sa√∫de em Itacoatiara.")
}
# 2Ô∏è‚É£ Carregar os bairros e pontos selecionados pelo p-median
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
# Verificar se h√° bairros dispon√≠veis
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM.")
}
# Calcular centroides dos bairros
coords_bairros <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords_bairros)
# Supondo que os bairros selecionados sejam extra√≠dos do resultado do p-median:
pontos_selecionados <- bairros_itacoatiara$geom[bairros_itacoatiara$selected == "Selected"]
print(pontos_selecionados)
print(unique(bairros_itacoatiara$selected))
# 3Ô∏è‚É£ Calcular a dist√¢ncia entre postos existentes e pontos selecionados
distancias <- st_distance(ubs_itacoatiara$geom, pontos_selecionados)
# Converter dist√¢ncias para quil√¥metros
distancias_km <- set_units(distancias, "km")
# Exibir matriz de dist√¢ncias
print(distancias_km)
# 4Ô∏è‚É£ Plotar mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black") +
geom_sf(data = ubs_itacoatiara, color = "red", size = 3, aes(geometry = geom)) +
geom_sf(data = pontos_selecionados, color = "blue", size = 4, aes(geometry = geom)) +
geom_text_repel(data = ubs_itacoatiara, aes(label = name_health_facility, geometry = geom),
stat = "sf_coordinates", size = 3, color = "red") +
geom_text_repel(data = bairros_itacoatiara[bairros_itacoatiara$selected == "Selected", ],
aes(label = name_neighborhood, geometry = geom), stat = "sf_coordinates",
size = 3, color = "blue") +
labs(title = "Dist√¢ncia entre UBS existentes e postos sugeridos pelo p-median",
subtitle = "Postos existentes (üî¥) e pontos √≥timos selecionados (üîµ)") +
theme_minimal()
library(geobr)
library(sf)
library(ggplot2)
library(ggrepel)
library(units)
# 1Ô∏è‚É£ Carregar os postos de sa√∫de existentes em Itacoatiara
ubs <- read_health_facilities()  # Carrega todas as UBS do Brasil
ubs_itacoatiara <- ubs[ubs$code_muni == 1301902, ]  # Filtra para Itacoatiara
# Verificar se h√° UBS na cidade
if (nrow(ubs_itacoatiara) == 0) {
stop("N√£o foram encontrados postos de sa√∫de em Itacoatiara.")
}
# 2Ô∏è‚É£ Carregar os bairros e pontos selecionados pelo p-median
bairros <- read_neighborhood(year = 2022)
bairros_itacoatiara <- bairros[bairros$code_muni == 1301902, ]
# Verificar se h√° bairros dispon√≠veis
if (nrow(bairros_itacoatiara) == 0) {
stop("N√£o foram encontrados bairros para Itacoatiara-AM.")
}
# Calcular centroides dos bairros
coords_bairros <- st_centroid(bairros_itacoatiara$geom)
coords_matrix <- st_coordinates(coords_bairros)
# Supondo que os bairros selecionados sejam extra√≠dos do resultado do p-median:
pontos_selecionados <- bairros_itacoatiara[bairros_itacoatiara$selected == "Selected", ]
print(pontos_selecionados)
print(unique(bairros_itacoatiara$selected))
print(st_geometry(pontos_selecionados))
# 3Ô∏è‚É£ Calcular a dist√¢ncia entre postos existentes e pontos selecionados
distancias <- st_distance(ubs_itacoatiara$geom, pontos_selecionados)
# Converter dist√¢ncias para quil√¥metros
distancias_km <- set_units(distancias, "km")
# Exibir matriz de dist√¢ncias
print(distancias_km)
# 4Ô∏è‚É£ Plotar mapa
ggplot() +
geom_sf(data = bairros_itacoatiara, fill = "lightgrey", color = "black") +
geom_sf(data = ubs_itacoatiara, color = "red", size = 3, aes(geometry = geom)) +
geom_sf(data = pontos_selecionados, color = "blue", size = 4, aes(geometry = geom)) +
geom_text_repel(data = ubs_itacoatiara, aes(label = name_health_facility, geometry = geom),
stat = "sf_coordinates", size = 3, color = "red") +
geom_text_repel(data = bairros_itacoatiara[bairros_itacoatiara$selected == "Selected", ],
aes(label = name_neighborhood, geometry = geom), stat = "sf_coordinates",
size = 3, color = "blue") +
labs(title = "Dist√¢ncia entre UBS existentes e postos sugeridos pelo p-median",
subtitle = "Postos existentes (üî¥) e pontos √≥timos selecionados (üîµ)") +
theme_minimal()
setwd("C:/Users/emanu/OneDrive/Documentos/Universidade/PIBIC/ProblemaDeLocalizacao/c√≥digos R")
